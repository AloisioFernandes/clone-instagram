{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/home/aloisio/Desktop/Programas/HTML CSS JS/clone-instagram/mobile/src/components/LazyImage/index.js\";\nimport React, { useState, useEffect } from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport { Small, Original } from \"./styles\";\nvar OriginalAnimated = Animated.createAnimatedComponent(Original);\nexport default function LazyImage(_ref) {\n  var smallSource = _ref.smallSource,\n      source = _ref.source,\n      aspectRatio = _ref.aspectRatio,\n      shouldLoad = _ref.shouldLoad;\n  var opacity = new Animated.Value(0);\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      loaded = _useState2[0],\n      setLoaded = _useState2[1];\n\n  useEffect(function () {\n    if (shouldLoad) {\n      setLoaded(true);\n    }\n  }, [shouldLoad]);\n\n  function handleAnimate() {\n    Animated.timing(opacity, {\n      toValue: 1,\n      duration: 500,\n      useNativeDriver: true\n    }).start();\n  }\n\n  return React.createElement(Small, {\n    source: smallSource,\n    ratio: aspectRatio,\n    resizeMode: \"contain\",\n    blurRadius: 2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 9\n    }\n  }, loaded && React.createElement(OriginalAnimated, {\n    style: {\n      opacity: opacity\n    },\n    source: source,\n    ratio: aspectRatio,\n    resizeMode: \"contain\",\n    onLoadEnd: handleAnimate,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }\n  }));\n}","map":{"version":3,"sources":["/home/aloisio/Desktop/Programas/HTML CSS JS/clone-instagram/mobile/src/components/LazyImage/index.js"],"names":["React","useState","useEffect","Small","Original","OriginalAnimated","Animated","createAnimatedComponent","LazyImage","smallSource","source","aspectRatio","shouldLoad","opacity","Value","loaded","setLoaded","handleAnimate","timing","toValue","duration","useNativeDriver","start"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;;AAGA,SAASC,KAAT,EAAgBC,QAAhB;AAEA,IAAMC,gBAAgB,GAAGC,QAAQ,CAACC,uBAAT,CAAiCH,QAAjC,CAAzB;AAEA,eAAe,SAASI,SAAT,OAKZ;AAAA,MAJCC,WAID,QAJCA,WAID;AAAA,MAHCC,MAGD,QAHCA,MAGD;AAAA,MAFCC,WAED,QAFCA,WAED;AAAA,MADCC,UACD,QADCA,UACD;AACC,MAAMC,OAAO,GAAG,IAAIP,QAAQ,CAACQ,KAAb,CAAmB,CAAnB,CAAhB;;AADD,kBAE6Bb,QAAQ,CAAC,KAAD,CAFrC;AAAA;AAAA,MAEQc,MAFR;AAAA,MAEgBC,SAFhB;;AAICd,EAAAA,SAAS,CAAC,YAAM;AACd,QAAGU,UAAH,EAAe;AACbI,MAAAA,SAAS,CAAC,IAAD,CAAT;AACD;AACF,GAJQ,EAIN,CAACJ,UAAD,CAJM,CAAT;;AAMA,WAASK,aAAT,GAAyB;AACrBX,IAAAA,QAAQ,CAACY,MAAT,CAAgBL,OAAhB,EAAyB;AACrBM,MAAAA,OAAO,EAAE,CADY;AAErBC,MAAAA,QAAQ,EAAE,GAFW;AAGrBC,MAAAA,eAAe,EAAE;AAHI,KAAzB,EAIGC,KAJH;AAKH;;AAED,SACI,oBAAC,KAAD;AACE,IAAA,MAAM,EAAEb,WADV;AAEE,IAAA,KAAK,EAAEE,WAFT;AAGE,IAAA,UAAU,EAAC,SAHb;AAIE,IAAA,UAAU,EAAE,CAJd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAOII,MAAM,IACN,oBAAC,gBAAD;AACE,IAAA,KAAK,EAAE;AAAEF,MAAAA,OAAO,EAAPA;AAAF,KADT;AAEE,IAAA,MAAM,EAAEH,MAFV;AAGE,IAAA,KAAK,EAAEC,WAHT;AAIE,IAAA,UAAU,EAAC,SAJb;AAKE,IAAA,SAAS,EAAEM,aALb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IARJ,CADJ;AAmBH","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { Animated } from 'react-native'\n\nimport { Small, Original } from './styles'\n\nconst OriginalAnimated = Animated.createAnimatedComponent(Original)\n\nexport default function LazyImage({\n    smallSource,\n    source,\n    aspectRatio,\n    shouldLoad,\n}) {\n    const opacity = new Animated.Value(0)\n    const [loaded, setLoaded] = useState(false)\n\n    useEffect(() => {\n      if(shouldLoad) {\n        setLoaded(true)\n      }\n    }, [shouldLoad])\n\n    function handleAnimate() {\n        Animated.timing(opacity, {\n            toValue: 1,\n            duration: 500,\n            useNativeDriver: true,\n        }).start()\n    }\n\n    return (\n        <Small \n          source={smallSource}\n          ratio={aspectRatio}\n          resizeMode=\"contain\"\n          blurRadius={2}\n        >\n          {\n            loaded &&\n            <OriginalAnimated\n              style={{ opacity }} \n              source={source}\n              ratio={aspectRatio}\n              resizeMode=\"contain\"\n              onLoadEnd={handleAnimate}\n            />\n          }\n        </Small>\n    )\n}"]},"metadata":{},"sourceType":"module"}