{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/home/aloisio/Desktop/Programas/HTML CSS JS/clone-instagram/mobile/src/pages/Feed/index.js\";\nimport React, { useState, useEffect, useCallback } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport LazyImage from \"../../components/LazyImage\";\nimport { Post, Header, Avatar, Name, Description, Loading } from \"./styles\";\nexport default function Feed() {\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      feed = _useState2[0],\n      setFeed = _useState2[1];\n\n  var _useState3 = useState(1),\n      _useState4 = _slicedToArray(_useState3, 2),\n      page = _useState4[0],\n      setPage = _useState4[1];\n\n  var _useState5 = useState(0),\n      _useState6 = _slicedToArray(_useState5, 2),\n      total = _useState6[0],\n      setTotal = _useState6[1];\n\n  var _useState7 = useState(false),\n      _useState8 = _slicedToArray(_useState7, 2),\n      loading = _useState8[0],\n      setLoading = _useState8[1];\n\n  var _useState9 = useState(false),\n      _useState10 = _slicedToArray(_useState9, 2),\n      refreshing = _useState10[0],\n      setRefreshing = _useState10[1];\n\n  var _useState11 = useState([]),\n      _useState12 = _slicedToArray(_useState11, 2),\n      viewable = _useState12[0],\n      setViewable = _useState12[1];\n\n  function loadPage() {\n    var pageNumber,\n        shouldRefresh,\n        response,\n        data,\n        totalItems,\n        _args = arguments;\n    return _regeneratorRuntime.async(function loadPage$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            pageNumber = _args.length > 0 && _args[0] !== undefined ? _args[0] : page;\n            shouldRefresh = _args.length > 1 && _args[1] !== undefined ? _args[1] : false;\n\n            if (!(total && pageNumber > total)) {\n              _context.next = 4;\n              break;\n            }\n\n            return _context.abrupt(\"return\");\n\n          case 4:\n            setLoading(true);\n            _context.next = 7;\n            return _regeneratorRuntime.awrap(fetch(\"http://localhost:3000/feed?_expand=author&_limit=5&_page=\" + pageNumber));\n\n          case 7:\n            response = _context.sent;\n            _context.next = 10;\n            return _regeneratorRuntime.awrap(response.json());\n\n          case 10:\n            data = _context.sent;\n            totalItems = response.headers.get('X-Total-Count');\n            setTotal(Math.floor(totalItems / 5));\n            setFeed(shouldRefresh ? data : [].concat(_toConsumableArray(feed), _toConsumableArray(data)));\n            setPage(pageNumber + 1);\n            setLoading(false);\n\n          case 16:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  useEffect(function () {\n    loadPage();\n  }, []);\n\n  function refreshList() {\n    return _regeneratorRuntime.async(function refreshList$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            setRefreshing(true);\n            _context2.next = 3;\n            return _regeneratorRuntime.awrap(loadPage(1, true));\n\n          case 3:\n            setRefreshing(false);\n\n          case 4:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  var handleViewableChanged = useCallback(function (_ref) {\n    var changed = _ref.changed;\n    setViewable(changed.map(function (_ref2) {\n      var item = _ref2.item;\n      return item.id;\n    }));\n  }, []);\n  return React.createElement(View, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }\n  }, React.createElement(FlatList, {\n    data: feed,\n    keyExtractor: function keyExtractor(post) {\n      return String(post.id);\n    },\n    onEndReached: function onEndReached() {\n      return loadPage();\n    },\n    onEndReachedThreshold: 0.1,\n    onRefresh: refreshList,\n    refreshing: refreshing,\n    onViewableItemsChanged: handleViewableChanged,\n    viewabilityConfig: {\n      viewAreaCoveragePercentThreshold: 20\n    },\n    ListFooterComponent: loading && React.createElement(Loading, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 47\n      }\n    }),\n    renderItem: function renderItem(_ref3) {\n      var item = _ref3.item;\n      return React.createElement(Post, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 19\n        }\n      }, React.createElement(Header, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 23\n        }\n      }, React.createElement(Avatar, {\n        source: {\n          uri: item.author.avatar\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 27\n        }\n      }), React.createElement(Name, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 27\n        }\n      }, item.author.name)), React.createElement(LazyImage, {\n        shouldLoad: viewable.includes(item.id),\n        aspectRatio: item.aspectRatio,\n        smallSource: {\n          uri: item.small\n        },\n        source: {\n          uri: item.image\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 23\n        }\n      }), React.createElement(Description, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 23\n        }\n      }, React.createElement(Name, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 27\n        }\n      }, item.author.name), \" \", item.description));\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }\n  }));\n}","map":{"version":3,"sources":["/home/aloisio/Desktop/Programas/HTML CSS JS/clone-instagram/mobile/src/pages/Feed/index.js"],"names":["React","useState","useEffect","useCallback","LazyImage","Post","Header","Avatar","Name","Description","Loading","Feed","feed","setFeed","page","setPage","total","setTotal","loading","setLoading","refreshing","setRefreshing","viewable","setViewable","loadPage","pageNumber","shouldRefresh","fetch","response","json","data","totalItems","headers","get","Math","floor","refreshList","handleViewableChanged","changed","map","item","id","post","String","viewAreaCoveragePercentThreshold","uri","author","avatar","name","includes","aspectRatio","small","image","description"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useCallback } from 'react'\nimport { View, FlatList } from 'react-native'\n\nimport LazyImage from '../../components/LazyImage'\n\nimport { Post, Header, Avatar, Name, Description, Loading } from './styles'\n\nexport default function Feed() {\n    const [feed, setFeed] = useState([])\n    const [page, setPage] = useState(1)\n    const [total, setTotal] = useState(0)\n    const [loading, setLoading] = useState(false)\n    const [refreshing, setRefreshing] = useState(false)\n    const [viewable, setViewable] = useState([])\n\n    async function loadPage(pageNumber=page, shouldRefresh=false) {\n        if(total && pageNumber > total) return\n\n        setLoading(true)\n\n        const response = await fetch(\n            `http://localhost:3000/feed?_expand=author&_limit=5&_page=${pageNumber}`\n        )\n\n        const data = await response.json()\n        const totalItems = response.headers.get('X-Total-Count')\n\n        setTotal(Math.floor(totalItems / 5))\n        setFeed(shouldRefresh ? data : [...feed, ...data])\n        setPage(pageNumber + 1)\n        setLoading(false)\n    }\n\n    useEffect(() => {\n        loadPage()\n    }, [])\n\n    async function refreshList() {\n        setRefreshing(true)\n        \n        await loadPage(1, true)\n\n        setRefreshing(false)\n    }\n\n    const handleViewableChanged = useCallback(({ changed }) => {\n        setViewable(changed.map(({ item }) => item.id))\n    }, [])\n\n    return (\n        <View>\n            <FlatList \n              data={feed}\n              keyExtractor={post => String(post.id)}\n              onEndReached={() => loadPage()}\n              onEndReachedThreshold={0.1}\n              onRefresh={refreshList}\n              refreshing={refreshing}\n              onViewableItemsChanged={handleViewableChanged}\n              viewabilityConfig={{ viewAreaCoveragePercentThreshold: 20 }}\n              ListFooterComponent={loading && <Loading />}\n              renderItem={({ item }) => (\n                  <Post>\n                      <Header>\n                          <Avatar source={{ uri: item.author.avatar }} />\n                          <Name>{item.author.name}</Name>\n                      </Header>\n\n                      <LazyImage\n                        shouldLoad={viewable.includes(item.id)}\n                        aspectRatio={item.aspectRatio} \n                        smallSource={{ uri: item.small }}\n                        source={{ uri: item.image }} \n                      />\n\n                      <Description>\n                          <Name>{item.author.name}</Name> {item.description}\n                      </Description>\n                  </Post>\n              )}\n            />\n        </View>\n    )\n}"]},"metadata":{},"sourceType":"module"}